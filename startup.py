import os
from POC.read_file import read_and_parse_data
import logging

logging.basicConfig(level=logging.INFO)


def worker(func):
    def wrapper(*args, **kwargs):
        if not args[1]:
            try:
                with open('MIClog.html', 'a') as f:
                    strTable = "<html><style> body { " \
                               "font-family: Open Sans, sans-serif; " \
                               "font-size: 13px;}"\
                               "td {  border: 1px solid #8E8D8A; " \
                               " text-align: left;  padding: 8px;}"\
                               "th {  border: 1px solid #8E8D8A; " \
                               " text-align: left; background-color:#C0C0C0;  padding: 8px;}</style> " \
                               "<body bgcolor='#EAE7DC'>" \
                               "<img src='logo.svg' style='float: right; width:150px;height:80px';>" \
                               "<h4> Generated By <br> System Team MIC <br> Bangalore, India</h4>" \
                               "<table style='table-layout: fixed; width: 100%;'" \
                               " fixed;><caption><h1>System MIC Report</h1></caption>" \
                               "<tr><th style='width:25%;'>Date</th><th style='width:25%;'>ConfigID</th>" \
                               "<th style='width:25%;'>ConfigName</th>" \
                               "<th style='width:25%;'>ConfigStatus</th></tr></table>"
                    logging.info('Created table with file data: {}'.format(strTable))
                    f.writelines(strTable)
                    func(*args, strTable, fd=f)
            except FileNotFoundError as e:
                logging.error("Error occurred while reading html file:{}".format(e))
        else:
            logging.info("File Already Exists! and adding data to existing html view")
            with open('MIClog.html', 'a') as f:
                func(*args, fd=f)

    return wrapper


@worker
def writeToHTML(*args, **kwargs):
    """

    :param args:
    :param kwargs:
    :return:
    """
    filteredData = args[0]
    if len(args) > 2:
        strtable = args[2]
    f = kwargs['fd']
    logging.info('Started updating column and row with file data')
    for item in filteredData:
        the_table = """<table style="table-layout: fixed; width:100%%">
            <tr>
                <td style="width=25%%">%(value1)s</td>
                <td style="width=25%%">%(value2)s</td>
                <td style="width=25%%">%(value3)s</td>
                <td style="background-color: %(color1)s;width=25%%">%(value4)s</td>
            </tr>
        </table>""" % {'value1': item[3],
                       'value2': item[0],
                       'value3': item[1],
                       'value4': item[2],
                       'color1': get_color(item[2]),
                       }
        f.writelines(the_table)
    logging.info('Completed updating column and row with file data')


def get_color(value):
    """

    :param value: Value is config status
    :return: returning color
    """
    logging.info("Get color based on config status value")
    color = None
    if value == 'leased':
        color = "#32CD32"
    elif value == "lease":
        color = "yellow"
    else:
        color = "#FF6347"
    return color


if __name__ == '__main__':
    FileExists = False
    if os.path.exists('MIClog.html'):
        FileExists = True
    try:
        data = open("test_log_.log", "r")
        result = read_and_parse_data(data)
        writeToHTML(result, FileExists, fd='None')
    except FileNotFoundError as e:
        logging.error("Wrong file or please check for the file: {}".format(e))
